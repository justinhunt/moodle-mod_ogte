{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["define(['jquery', 'core/log','core/ajax'], function ($, log,ajax) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file helps you get Polly URLs at runtime\n     */\n\n    log.debug('OGTE Utils: initialising');\n\n    return {\n        token:  '',\n        region: '',\n        owner: '',\n\n        setCloudPoodllToken: function(token){\n          this.token=token;\n        },\n        countWords: function(sentence) {\n            // Remove any leading or trailing spaces\n            sentence = sentence.trim();\n\n            // Count the number of spaces in the sentence\n            var spaceCount = (sentence.match(/ /g) || []).length;\n\n            // Add 1 to get the number of words (assuming at least one space)\n            return spaceCount + 1;\n        },\n\n        levelPassage: function(thepassage,ignore,listid,listlevel, ogteid){\n            var that = this;\n            return ajax.call([{\n                methodname: 'mod_ogte_get_coverage',\n                args: {\n                    'ogteid': ogteid,\n                    'passage': thepassage,\n                    'ignore': ignore,\n                    'listid': listid,\n                    'listlevel': listlevel\n                },\n                async: false\n            }])[0];\n        },\n\n\n        stripTags: function(input) {\n            if(typeof input === \"undefined\" || input == null) return \"\";\n            return input.replace(/<[^>]*>/g, '');\n        },\n\n        getSelectedWord: function () {\n\n            var selectedText = \"\";\n            if (window.getSelection) {\n                selectedText = window.getSelection().toString();\n            } else if (document.selection && document.selection.type !== \"Control\") {\n                selectedText = document.selection.createRange().text;\n            }\n            if (selectedText.length > 0){\n                var words = selectedText.split(/\\s+/);\n                // Get the first word\n                if (words.length > 0) {\n                    return words[0];\n                }\n            }\n            return selectedText;\n        },\n\n        analyzeText: function (text) {\n\n            //tidy it up\n            text=this.stripTags(text);\n\n            // Count the number of words\n            const words = text.split(/\\s+/);\n            const wordCount = words.length;\n            const totalChars = text.length;\n\n            // Calculate the average word length\n            const totalWordLength = words.reduce((acc, word) => acc + word.length, 0);\n            const averageWordLength = (totalWordLength / wordCount).toFixed(1);\n\n            // Count the number of sentences\n            const sentences = text.split(/[.!?]+/);\n            const sentenceCount = sentences.length - 1; // Ignore the last element\n\n            // Calculate the average sentence length\n            var totalSentenceLength =0;\n            for (var i =0; i<sentences.length;i++){\n                totalSentenceLength += this.countWords(sentences[i]);\n            }\n            // const totalSentenceLength = sentences.reduce((acc, sentence) => acc + sentence.length, 0);\n            const averageSentenceLength = (totalSentenceLength / sentenceCount).toFixed(1);\n\n            var stats = {\n                charCount: totalChars,\n                wordCount: wordCount,\n                avWordLength: averageWordLength,\n                sentenceCount: sentenceCount,\n                avSentenceLength: averageSentenceLength,\n            };\n            return stats;\n        },\n\n        //FUNCTION rewrite article\n        call_ai: function(prompt, language,subject,action, callback) {\n\n            //The REST API we are calling\n            var functionname = 'local_cpapi_call_ai';\n\n            //fetch the Posturl. We need this.\n            //set up our ajax request\n            var xhr = new XMLHttpRequest();\n            var that = this;\n\n            //set up our handler for the response\n            xhr.onreadystatechange = function (e) {\n                if (this.readyState === 4) {\n                    if (xhr.status == 200) {\n\n                        //get a yes or forgetit or tryagain\n                        var payload = xhr.responseText;\n                        var payloadobject = JSON.parse(payload);\n                        if (payloadobject) {\n                            //returnCode > 0  indicates an error\n                            if (payloadobject.returnCode > 0) {\n                                console.log(payloadobject.returnMessage);\n                                return false;\n                                //if all good, then lets do the embed\n                            } else if (payloadobject.returnCode === 0){\n                                var pollyurl = payloadobject.returnMessage;\n                                callback(pollyurl);\n                            } else {\n                                console.log(' Request failed:');\n                                console.log(payloadobject);\n                            }\n                        } else {\n                            console.log(' Request something bad happened');\n                        }\n                    } else {\n                        console.log('Request Not 200 response:' + xhr.status);\n                    }\n                }\n            };\n\n            //make our request\n            var xhrparams = \"wstoken=\" + this.token\n                + \"&wsfunction=\" + functionname\n                + \"&moodlewsrestformat=\" + 'json'\n                + \"&prompt=\" + encodeURIComponent(prompt)\n                + \"&language=\" + language\n                + \"&subject=\" + subject\n                + \"&action=\" + action\n                + '&appid=' + 'mod_ogte'\n                + '&owner=poodll'\n                + '&region=useast1';\n\n            var serverurl = 'https://cloud.poodll.com' + \"/webservice/rest/server.php\";\n            xhr.open(\"POST\", serverurl, true);\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            xhr.send(xhrparams);\n        },\n\n\n\n\n\n\n\n\n\n\n    init: function(token, region, owner){\n            this.token =token;\n            this.region=region;\n            this.owner=owner;\n        },\n\n        clean_ssml_chars: function(speaktext){\n            //deal with SSML reserved characters\n            speaktext =  speaktext.replace(/&/g,'&amp;');\n            speaktext = speaktext.replace(/'/g,'&apos;');\n            speaktext= speaktext.replace(/\"/g,'&quot;');\n            speaktext = speaktext.replace(/</g,'&lt;');\n            speaktext =  speaktext.replace(/>/g,'&gt;');\n            return speaktext;\n        },\n\n        can_speak_neural: function(voice,region){\n            switch(region){\n                case \"useast1\":\n                case \"tokyo\":\n                case \"sydney\":\n                case \"dublin\":\n                case \"ottawa\":\n                case \"frankfurt\":\n                case \"london\":\n                case \"singapore\":\n                case \"capetown\":\n                    //ok\n                    break;\n                default:\n                    return false;\n            }\n\n            //check if the voice is supported\n            if(def.neural_voices.indexOf(voice) !== -1){\n                return true;\n            }else{\n                return false;\n            }\n\n        },\n\n        fetch_polly_url: function(speaktext,voiceoption, voice) {\n            var that = this;\n            return new Promise(function(resolve,reject){\n                //The REST API we are calling\n                var functionname = 'local_cpapi_fetch_polly_url';\n\n                //fetch the Posturl. We need this.\n                //set up our ajax request\n                var xhr = new XMLHttpRequest();\n\n                //set up our handler for the response\n                xhr.onreadystatechange = function (e) {\n                    if (this.readyState === 4) {\n                        if (xhr.status == 200) {\n\n                            //get a yes or forgetit or tryagain\n                            var payload = xhr.responseText;\n                            var payloadobject = JSON.parse(payload);\n                            if (payloadobject) {\n                                //returnCode > 0  indicates an error\n                                if (payloadobject.returnCode > 0) {\n                                    reject(payloadobject.returnMessage);\n                                    log.debug(payloadobject.returnMessage);\n                                    return false;\n                                    //if all good, then lets do the embed\n                                } else if (payloadobject.returnCode === 0){\n                                    var pollyurl = payloadobject.returnMessage;\n                                    resolve(pollyurl);\n                                } else {\n                                    reject('Polly Signed URL Request failed:');\n                                    log.debug('Polly Signed URL Request failed:');\n                                    log.debug(payloadobject);\n                                }\n                            } else {\n                                reject('Polly Signed URL Request something bad happened');\n                                log.debug('Polly Signed URL Request something bad happened');\n                            }\n                        } else {\n                            reject('Polly Signed URL Request Not 200 response:' + xhr.status);\n                            log.debug('Polly Signed URL Request Not 200 response:' + xhr.status);\n                        }\n                    }\n                };\n                var texttype='ssml';\n\n                switch(parseInt(voiceoption)){\n\n                    //slow\n                    case 1:\n                        //fetch slightly slower version of speech\n                        //rate = 'slow' or 'x-slow' or 'medium'\n                        speaktext =that.clean_ssml_chars(speaktext);\n                        speaktext = '<speak><break time=\"1000ms\"></break><prosody rate=\"slow\">' + speaktext + '</prosody></speak>';\n                        break;\n                    //veryslow\n                    case 2:\n                        //fetch slightly slower version of speech\n                        //rate = 'slow' or 'x-slow' or 'medium'\n                        speaktext =that.clean_ssml_chars(speaktext);\n                        speaktext = '<speak><break time=\"1000ms\"></break><prosody rate=\"x-slow\">' + speaktext + '</prosody></speak>';\n                        break;\n                    //ssml\n                    case 3:\n                        speaktext='<speak>' + speaktext + '</speak>';\n                        break;\n\n                    //normal\n                    case 0:\n                    default:\n                        //fetch slightly slower version of speech\n                        //rate = 'slow' or 'x-slow' or 'medium'\n                        speaktext =that.clean_ssml_chars(speaktext);\n                        speaktext = '<speak><break time=\"1000ms\"></break>' + speaktext + '</speak>';\n                        break;\n\n                }\n\n                //to use the neural or standard synthesis engine\n                var engine = that.can_speak_neural(voice,that.region) ?'neural' : 'standard';\n\n                //log.debug(params);\n                var xhrparams = \"wstoken=\" + that.token\n                + \"&wsfunction=\" + functionname\n                + \"&moodlewsrestformat=\" + 'json'\n                + \"&text=\" + encodeURIComponent(speaktext)\n                + '&texttype=' + texttype\n                + '&voice=' + voice\n                + '&appid=' + def.component\n                + '&owner=' + that.owner\n                + '&region=' + that.region\n                + '&engine=' + engine;\n\n                var serverurl = def.cloudpoodllurl + \"/webservice/rest/server.php\";\n                xhr.open(\"POST\", serverurl, true);\n                xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                xhr.send(xhrparams);\n            });\n        }\n\n    };//end of return value\n});\n"],"names":["define","$","log","ajax","debug","token","region","owner","setCloudPoodllToken","countWords","sentence","trim","match","length","levelPassage","thepassage","ignore","listid","listlevel","ogteid","call","methodname","args","async","stripTags","input","replace","getSelectedWord","selectedText","window","getSelection","toString","document","selection","type","createRange","text","words","split","analyzeText","this","wordCount","totalChars","averageWordLength","reduce","acc","word","toFixed","sentences","sentenceCount","totalSentenceLength","i","charCount","avWordLength","avSentenceLength","call_ai","prompt","language","subject","action","callback","xhr","XMLHttpRequest","onreadystatechange","e","readyState","status","payload","responseText","payloadobject","JSON","parse","returnCode","console","returnMessage","pollyurl","xhrparams","encodeURIComponent","open","setRequestHeader","send","init","clean_ssml_chars","speaktext","can_speak_neural","voice","def","neural_voices","indexOf","fetch_polly_url","voiceoption","that","Promise","resolve","reject","parseInt","engine","component","serverurl","cloudpoodllurl"],"mappings":"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"}